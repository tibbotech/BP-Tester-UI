include "display.tbh"

const MAX_NUM_OF_SENSORS = 50
const MAX_SENSOR_ID_NUM = 10
const MIN_SENSOR_ID_NUM = 1
dim sensor_no(MAX_NUM_OF_SENSORS) as byte
dim sensor_type(MAX_NUM_OF_SENSORS) as byte
dim sensor_data(MAX_NUM_OF_SENSORS) as string
dim monitor_version(MAX_NUM_OF_SENSORS) as string
dim firmware_version(MAX_NUM_OF_SENSORS) as string
dim poll_sensors, ok_to_poll,scan_screen as boolean=false
dim pattern_timer as dword = sys.timercount32
dim x,y,z,m,v,timer,LED,screen,total_detected_sensors,total_num_pages,current_page as byte=0
dim id as byte = 1

'Initializes LCD screen

sub lcd_init()
	lcd.width=320
	lcd.height=240
	io.num=PL_IO_NUM_55
	io.enabled=YES
	io.num=PL_IO_NUM_43
	io.enabled=YES
	io.num=PL_IO_NUM_42
	io.enabled=YES
	io.num=PL_IO_NUM_41
	io.enabled=YES
	io.num=PL_IO_NUM_40
	io.enabled=YES
	lcd.iomapping="55,43,42,41,40,0" 
	lcd.rotated=YES 
	lcd.enabled=YES
	io.num=PL_IO_NUM_54 
	io.enabled=YES
	io.state=LOW
	io.num=PL_IO_NUM_44
	io.enabled=YES
	io.state=LOW
	kp.returnlinesmapping="36,37,38,39"
	kp.enabled=YES
	io.num=46
	io.enabled=YES
	io.num=47
	io.enabled=YES
	io.num=48
	io.enabled=YES
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	set_LED(&b00000)
	beep.divider=21600
	beep.play("BB",PL_BEEP_CANINT)
	pat.play(PAT_THREE_SHORT_BOTH,PL_PAT_CANINT)
	home_screen()
	delay_ms(2000)
	pat.play(PAT_TWO_SHORT_GREEN,PL_PAT_CANINT)
end sub

'Handles Keypad Events

sub on_kp(key_event as pl_kp_event_codes, key_code as byte)
	if key_event=PL_KP_EVENT_PRESSED then
		beep.play("B*",PL_BEEP_CANINT)
				
		'Main screen
		if screen=0 then
			select case key_code
			'Scan
			case 0:
				poll_sensors=false
				scanning_sensors_screen()
				lcd_scan()
			'Poll
			case 1:
				scan_screen=false
				if ok_to_poll=true then
					poll_sensors=true
					clear_data_screen()
					change_column_name()
					current_page=0
				end if
			'Upload Firmware
			case 2:
				scan_screen=false
				poll_sensors=false
				ok_to_poll=false
				upload_firmware_screen()
				screen=1
			'Set ID
			case 3:
				scan_screen=false
				poll_sensors=false
				ok_to_poll=false
				set_id_screen()		
				screen=2
			end select
		
		
		'Upload Firmware Screen
		else if screen=1 then
			select case key_code
			'Exit back to home screen
			case 0:
				home_screen()
				screen=0
			'Upload Hexagon Firwmare to sensor
			case 2:
				firmware_upload_screen()
				screen=3
			'Upload Hexagon Monitor to sensor
			case 3:
				monitor_upload_screen()
				screen=4
			end select
			
		'Set sensor ID screen
		else if screen=2 then
			select case key_code
			'Exit back to home screen
			case 0:
				home_screen()
				screen=0
			'Decrease ID number
			case 1:
				if id>MIN_SENSOR_ID_NUM then
					id=id-1
				else 
					id=MAX_SENSOR_ID_NUM
				end if
				change_id()
			'Increase ID number
			case 2:
				if id<MAX_SENSOR_ID_NUM then
					id=id+1
				else
					id=MIN_SENSOR_ID_NUM
				end if
				change_id()
			'Send command to change ID
			case 3:
				reprogram_address(0,id)
			end select		
		else if screen=3 then
			select case key_code
			'Exit back to home screen
			case 0:
				home_screen()
				screen=0
			case 3:
				screen=1
				do_xmodem_upload("HexagonFirmware.bin")
			end select				
		else if screen=4 then
			select case key_code
			'Exit back to home screen
			case 0:
				home_screen()
				screen=0
			case 3:
				screen=1
				do_xmodem_upload("MonitorUpdater.bin")
			end select		
		end if
	end if	
end sub

sub clear_data_screen()
	lcd.lock
	lcd.forecolor=0
	lcd.fill(6,80,308,135)
	lcd.forecolor=65535	
	lcd.unlock
end sub

'Display Home Screen

sub home_screen()
	lcd.lock
	clear_screen()
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Bus Probe Test",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.print("ID",10,50)
	lcd.print("Type",65,50)
	lcd.print("MV",130,50)
	lcd.print("FV",200,50)
	lcd.horline(5,315,75)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=65535
	lcd.print("Scan",30,227)
	lcd.print("Poll",107,227)
	lcd.print("Upload",181,227)
	lcd.print("Set ID",260,227)
	lcd.forecolor=65535 
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.unlock
end sub

'Displays set ID screen

sub set_id_screen()
	id=1
	lcd.lock
	clear_screen() 
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Set ID",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=65535
	lcd.print("Exit",30,227)
	lcd.print("-",112,227)
	lcd.print("+",203,227)
	lcd.print("Set ID",260,227)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.printaligned("1. Select the new ID.", 15,50,295,160)
	lcd.printaligned("2. Press and hold MD button on Probe.", 15,75,295,160)
	lcd.printaligned("3. Press the SET button.", 15,120,295,160)
	lcd.printaligned("4. Release the MD button.", 15,145,295,160)
	lcd.forecolor=65535
	lcd.print("ID: ",15,180)
	lcd.forecolor=val("&b"+strgen(lcd.greenbits/&hFF,"1")+strgen(lcd.greenbits And &hFF,"0"))
	lcd.print(str(id),45,180)
	lcd.forecolor=0
	lcd.unlock
end sub

'Changes the ID when user presses keypad button

sub change_id()
	lcd.forecolor=0
	lcd.fill(45,180,60,30)
	lcd.forecolor=65535
	lcd.print("ID: ",15,180)
	lcd.forecolor=val("&b"+strgen(lcd.greenbits/&hFF,"1")+strgen(lcd.greenbits And &hFF,"0"))
	lcd.print(str(id),45,180)
	lcd.forecolor=0	
end sub

'If a scan has been successfully completed and at least one sensor has been detected, sensors are polled every one second

sub on_sys_timer()
	if poll_sensors=true then
		pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
		timer=timer+1
		if timer>=2 then
			set_LED(&b00000)
			lcd_poll()
			timer=0
		else
			set_LED(&b11111)
		end if
	end if
end sub

'Scans for sensors

sub lcd_scan()
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	kp.enabled=NO
	dim b as byte=0
	dim percent as word
	reset_sensors()
	
	'Sends modbus request to every sensor between min and max. If a response is received, that sensors ID is saved in the array "sensor_no"
	for b=MIN_SENSOR_ID_NUM to MAX_SENSOR_ID_NUM
		percent = (b*100)/MAX_SENSOR_ID_NUM
		update_scanning_sensors_screen(percent)
		if x>=MAX_NUM_OF_SENSORS then
			max_sensors_screen()
			exit for
		end if
		scan_sensors(b)
	next b
	
	'If sensor ID is saved in the array "sensor_no", gets the sensor type and stores it in the corresponding index in the array "sensor_type"
	for b=0 to MAX_NUM_OF_SENSORS-1
		if sensor_no(b)<>0 then
			get_sensor_type(sensor_no(b))
			end if
	next b	
	total_detected_sensors=x
	scan_successful_screen()
	lcd.lock
	
	for b=0 to MAX_NUM_OF_SENSORS-1
		if sensor_no(b)<>0 then
			get_monitor_version(sensor_no(b))
			end if
	next b	
	
	for b=0 to MAX_NUM_OF_SENSORS-1
		if sensor_no(b)<>0 then
			get_firmware_version(sensor_no(b))
		end if
	next b	
	
	
	'Calculates the total number of pages necessary to display all of the sensors
	if total_detected_sensors mod 6=0 then
		total_num_pages=total_detected_sensors/6
	else 
		total_num_pages=(total_detected_sensors/6)+1
	end if
	
	if total_num_pages=0 then
		total_num_pages=1
	end if
	
	lcd_show_firmware()
	
	lcd.unlock
	kp.enabled=YES
	set_LED(&b00000)
	pat.play(PAT_TWO_SHORT_GREEN,PL_PAT_CANINT)
	scan_screen=true
	
end sub

'Shows the monitor version and firmare version for each of the attached sensors

sub lcd_show_firmware()

	'Calculates the start index based on the currently selected page. 
	dim b,c as byte=0
	dim start_index as byte = current_page * 6
	dim position as word = 0
	'A maximum of 6 sensors can fit on the screen. Displays the first 6 detected sensors on the screen.
	for b=start_index to start_index+5
		if sensor_no(b)<>0 then
			lcd.print(str(sensor_no(b)),10,90+(20*position))
			lcd.print(monitor_version(b),130,90+(20*position))
			lcd.print(firmware_version(b),200,90+(20*position))
			select case sensor_type(b)
			case 0:lcd.print("?",65,90+(20*position))
			case 1:lcd.print("BP#1",65,90+(20*position))
			case 2:lcd.print("BP#2",65,90+(20*position))
			case 3:lcd.print("BP#3",65,90+(20*position))
			case 4:lcd.print("BP#4",65,90+(20*position))
			case 5:lcd.print("BP#5",65,90+(20*position))
	end select
		end if
		position=position+1
	next b
	lcd.print("Page "+ str(current_page+1)+"/"+str(total_num_pages),227,12)
	
end sub

'Erases "MV" and "FV" in the column name, replaces with "Data"

sub change_column_name()
	
	lcd.lock
	lcd.forecolor=0
	lcd.fill(180,50,124,17)
	lcd.forecolor=65535
	lcd.print("Data",130,50)
	lcd.unlock
end sub

'Polls all of the sensors and updates their values accordingly
sub lcd_poll()
	
	'Calculates the start index based on the currently selected page. 
	dim b,c as byte=0
	dim start_index as byte = current_page * 6
	x=start_index
	y=start_index
	z=start_index
	
	'For each index for the currently selected array, gets the sensor data depending on the sensor type.
	for b=start_index to start_index+5
		if sensor_no(b)<>0 then
			get_sensor_data(sensor_no(b),sensor_type(b))
		end if
	next b	
	
	'Prints the sensor data in the correct position on the screen.
	dim position as word = 0
	for b=start_index to start_index+5
		if sensor_no(b)<>0 then
			lcd.print(str(sensor_no(b)),10,90+(20*position))
			lcd.print(str(sensor_data(b)),130,90+(20*position))
			select case sensor_type(b)
			case 0:
				clear_line(position)
				lcd.print("?",70,90+(20*position))
				lcd.print("?",130,90+(20*position))
			case 1:			
				clear_line(position)
				lcd.print("BP#1",65,90+(20*position))
				if sensor_data(b)="" then
					lcd.print("XXX",130,90+(20*position))
				else
					lcd.print(sensor_data(b)+ "C",130,90+(20*position))
				end if
			case 2:			
				clear_line(position)
				lcd.print("BP#2",65,90+(20*position))
				if sensor_data(b)="" then
					lcd.print("XXX",130,90+(20*position))
				else
					c=instr(1,sensor_data(b),"x",1)
					lcd.print(left(sensor_data(b),c-1)+ "0C " + right(sensor_data(b),len(sensor_data(b))-c) + "%",130,90+(20*position))
				end if				
			case 3:
				clear_line(position)
				lcd.print("BP#3",65,90+(20*position))
				if sensor_data(b)="" then
					lcd.print("XXX",130,90+(20*position))
				else
					lcd.print(sensor_data(b)+ " lx",130,90+(20*position))
				end if
			case 4:
				clear_line(position)
				lcd.print("BP#4",65,90+(20*position))
				if sensor_data(b)="" then
					lcd.print("XXX",130,90+(20*position))
				else
					dim data as string
					data=get_accelerometer_values(b)
					lcd.print(data,130,90+(20*position))
				end if
			case 5:
				clear_line(position)
				lcd.print("BP#5",65,90+(20*position))
				if sensor_data(b)="" then
					lcd.print("XXX",130,90+(20*position))
				else
					lcd.print(sensor_data(b),130,90+(20*position))
				end if
			end select
		end if
	position=position+1
	next b
	lcd.print("Page "+ str(current_page+1)+"/"+str(total_num_pages),227,12)
	lcd.unlock
	
end sub

function get_accelerometer_values(b as byte) as string
	dim c, d, e as byte
	dim xval,yval,zval as string
	dim w as word
	
	c=instr(1,sensor_data(b),"x",1)
	xval=left(sensor_data(b),c-1)
	xval=convert_accelerometer_values(xval)
	
	d=instr(1,sensor_data(b),"x",2)
	yval=left(sensor_data(b),d-1)
	yval=right(yval,len(yval)-c)
	yval=convert_accelerometer_values(yval)
	
	zval=right(sensor_data(b),len(sensor_data(b))-d)
	zval=convert_accelerometer_values(zval)
	get_accelerometer_values=xval+"/"+yval+"/"+zval+" G"
	
end function

function convert_accelerometer_values(value as string) as string
	
	dim val_i as integer
	dim i as byte
	dim len_val as byte
	dim negativ as boolean
	
	val_i = val(value)
	if val_i < 0 then
		val_i = val_i - 50	' For rounding
	else
		val_i = val_i + 50	' For rounding
	end if
	value = stri(val_i)
	len_val = len(value)
	
	if val_i < 0 then 
		negativ = true
		value = mid(value, 2, len_val - 1)
		len_val = len_val - 1
	else 
		negativ = false
	end if
	
	if len_val > 2 then
		convert_accelerometer_values = "." + mid(value, len_val - 2, 1)
	else 
		convert_accelerometer_values = ".0"
	end if
	
	if len_val > 3 then
		convert_accelerometer_values = mid(value, len_val - 3, 1) + convert_accelerometer_values
	else 
		convert_accelerometer_values = "0" + convert_accelerometer_values
	end if

	if len_val > 4 then
		convert_accelerometer_values = mid(value, len_val - 4, 1) + convert_accelerometer_values
	end if

	if negativ then
		if convert_accelerometer_values <> "0.0" then 
			convert_accelerometer_values = "-" + convert_accelerometer_values
		end if
	end if
	
end function

'Clears a line in order to update it with new sensor data

sub clear_line(position as word)
	
	lcd.forecolor=0
	lcd.fill(130,90+(20*position),185,17)
	lcd.forecolor=65535
		
end sub

'Sets each sensors ID in the array "sensor_no"

sub set_sensor_id(id as byte)

	sensor_no(x)=id
	x=x+1
	
end sub

'Sets each sensors type in the corresponding index in the array "sensor_type"


sub set_sensor_type(stype as byte)

	sensor_type(y)=stype
	y=y+1

end sub

'Sets each sensors data in the corresponding index in the array "sensor_data"

sub set_sensor_data(data as string)

	sensor_data(z)=data
	z=z+1

end sub

'Sets each sensors monitor version in the corresponding index in the array "monitor_version"


sub set_monitor_version(data as string)

	monitor_version(m)=data
	m=m+1

end sub

'Sets each sensors firmware version in the corresponding index in the array "firmware_version"

sub set_firmware_version(data as string)

	firmware_version(v)=data
	v=v+1

end sub

'If sensors are being polled and more than 6 sensors have been detected, changes the page number to show more sensors

sub on_button_pressed()
	
	if poll_sensors=true then
		if current_page<total_num_pages-1 then
			current_page=current_page+1
		else
			current_page=0
		end if
		lcd.lock
		lcd.forecolor=0
		lcd.fill(6,80,308,135)
		lcd.forecolor=65535	
		lcd.unlock
	else if scan_screen=true then
		if current_page<total_num_pages-1 then
			current_page=current_page+1
		else
			current_page=0
		end if
		lcd.lock
		lcd.forecolor=0
		lcd.fill(6,80,308,135)
		lcd.forecolor=65535
		lcd_show_firmware()
		lcd.unlock		
	end if
	
end sub

'Shows the scanning sensor screen

sub scanning_sensors_screen()
	
	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Scanning for Probes",60,100)
	
end sub

'Updates the progress of the sensor scanning

sub update_scanning_sensors_screen(percent as word)
	if percent<10 then
		lcd.print(str(percent) +"% complete",105,130)
	else
		lcd.print(str(percent) +"% complete",95,130)
	end if
	lcd.rectangle(60,170,260,190)
	lcd.fill(60,170,percent*2,20)
	led_scanning_sensors()
end sub

'Displays the firmware upload in progress screen

sub firmware_upload_in_prog_screen()

	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Uploading Firmware",70,100)

end sub

'Updates the progress of the firmware uploading

sub update_firmware_upload_screen(currentpack as word, totalpacks as word)

	dim percent as word
	percent = (currentpack*100)/totalpacks
	if percent<10 then
		lcd.print(str(percent) +"% complete",105,130)
	else
		lcd.print(str(percent) +"% complete",95,130)
	end if
	lcd.rectangle(60,170,260,190)
	lcd.fill(60,170,percent*2,20)
	led_firmware_uploading()
	
end sub

'Displays the upload successful screen

sub upload_successful_screen()
	pat.play(PAT_TWO_SHORT_GREEN,PL_PAT_CANINT)
	set_LED(&b11111)	
	clear_screen() 
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Upload Successful!",80,110)
	delay_ms(3000)
	set_LED(&b00000)
	upload_firmware_screen()
	
end sub


'Displays the please wait screen

sub please_wait_screen()
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	set_LED(&b11111)
	clear_screen() 
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Please Wait...",100,110)
	delay_ms(4000)
	set_LED(&b00000)
	
end sub

'Displays the scan successful screen

sub scan_successful_screen()

	set_LED(&b11111)
	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Scan Successful!",80,100)
	lcd.print(str(x) +" Probes Detected!",65,140)
	if x>0 then
		ok_to_poll=true
	end if
	delay_ms(1000)
	set_LED(&b00000)
	home_screen()
	
end sub

'Displays the max number of sensors detected screen

sub max_sensors_screen()

	set_LED(&b11111)
	
	clear_screen() 
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Maximum number of Probes",30,85)
	lcd.print("detected!",115,110)
	lcd.print("Stopping scan!",95,150)
	delay_ms(1000)
		
end sub

'Displays the upload firmware screen

sub upload_firmware_screen()
	
	lcd.lock
	clear_screen()
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Upload",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=65535
	lcd.print("Exit",30,227)
	lcd.print("Upload",183,222)
	lcd.print("Firmware",177,230)
	lcd.print("Upload",260,222)
	lcd.print("Monitor",258,230)
	lcd.printaligned("Upload Monitor",260,222,50,50)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.printaligned("Select Upload Firmware or Upload Monitor", 15,50,295,160)
	lcd.print("Firmware Version:", 15,120)
	lcd.forecolor=val("&b"+strgen(lcd.greenbits/&hFF,"1")+strgen(lcd.greenbits And &hFF,"0"))
	lcd.print("1.04", 179,120)
	lcd.forecolor=65535 
	lcd.print("Monitor Version:", 15,164)
	lcd.forecolor=val("&b"+strgen(lcd.greenbits/&hFF,"1")+strgen(lcd.greenbits And &hFF,"0"))
	lcd.print("1.01", 168,165)
	lcd.forecolor=65535 
	lcd.unlock

end sub

'Displays the upload firmware screen

sub monitor_upload_screen()
	
	lcd.lock
	clear_screen()
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Upload",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=65535
	lcd.print("Exit",30,227)
	lcd.print("Upload",258,227)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.printaligned("1. Disconnect Probe power.", 15,50,295,160)
	lcd.printaligned("2. Press and hold MD button on Probe.", 15,75,295,160)
	lcd.printaligned("3. Connect power without releasing MD button", 15,120,295,160)
	lcd.printaligned("4. Release the MD button.", 15,165,295,160)
	lcd.printaligned("5. Press upload.", 15,190,295,160)
	lcd.forecolor=0
	lcd.unlock

end sub

'Displays the upload firmware screen

sub firmware_upload_screen()
	
	lcd.lock
	clear_screen()
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Upload",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=65535
	lcd.print("Exit",30,227)
	lcd.print("Upload",258,227)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.printaligned("1. Disconnect Probe power.", 15,50,295,160)
	lcd.printaligned("2. Press and hold MD button on Probe.", 15,75,295,160)
	lcd.printaligned("3. Connect power without releasing MD button", 15,120,295,160)
	lcd.printaligned("4. Release the MD button.", 15,165,295,160)
	lcd.printaligned("5. Press upload.", 15,190,295,160)
	lcd.forecolor=0
	lcd.unlock

end sub


'Sets the LED lights

sub set_LED(pattern as byte)

	dim f,x as byte
	dim s as string(8)
	
	s=mid(bin(pattern),3,8)
	s=strgen(8-len(s),"0")+s	
	
	'make 5 clocks
	io.num=PL_IO_NUM_47
	for f=0 to 4
		x=1-val(mid(s,f+4,1))
		io.lineset(PL_IO_NUM_48,x)
		io.state=LOW
		io.state=HIGH
	next f
	
end sub

'Plays a pattern on the LED lights to show sensors are being scanned

sub led_scanning_sensors()
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	if sys.timercount32-pattern_timer>=1 then
		if LED<4 then
			LED=LED+1
		else
			LED=0
		end if
		pattern_timer = sys.timercount32
	end if
	
	select case LED
	case 0:
		set_LED(&b00001)
	case 1:
		set_LED(&b00010)
	case 2:
		set_LED(&b00100)
	case 3:
		set_LED(&b01000)
	case 4:
		set_LED(&b10000)
	end select	
	
	
end sub

'Plays a pattern on the LED lights to show firmware is uploading

sub led_firmware_uploading()
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	if sys.timercount32-pattern_timer>=1 then
		if LED<4 then
			LED=LED+1
		else
			LED=0
		end if
		pattern_timer = sys.timercount32
	end if
	
	select case LED
	case 4:
		set_LED(&b00001)
	case 3:
		set_LED(&b00010)
	case 2:
		set_LED(&b00100)
	case 1:
		set_LED(&b01000)
	case 0:
		set_LED(&b10000)
	end select	
	
end sub

'Shows upload failed screen

sub upload_failed_screen()
	pat.play(PAT_LONG_RED,PL_PAT_CANINT)
	set_LED(&b11111)
	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Upload Failed!",90,100)
	lcd.print("Please Try Again!",75,140)
	delay_ms(3000)
	set_LED(&b00000)
	screen=0
	home_screen()
			
end sub

'Shows unknown sensor detected screen

sub unknown_sensor_screen()
		
	set_LED(&b11111)
	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Unknown Sensor Detected!",40,120)
	delay_ms(1000)
	set_LED(&b00000)
	home_screen()
		
end sub

'Resets the array index counter for the sensor arrays

sub reset_sensors()
	
	dim counter as byte
	x=0
	y=0
	z=0
	m=0
	v=0
	
	for counter=0 to MAX_NUM_OF_SENSORS-1
		sensor_no(counter)=0
		sensor_type(counter)=0
		sensor_data(counter)=0
		monitor_version(counter)=0
		firmware_version(counter)=0
	next counter
	
end sub

'Clears the LCD screen

sub clear_screen()

	lcd.forecolor=0
	lcd.fill(0,0,lcd.width,lcd.height)
	lcd.backcolor=0
	lcd.forecolor=65535 
	
end sub

'Delays for a given number of milliseconds

sub delay_ms(ms as dword)
	dim i as dword
	i=sys.timercountms
	while sys.timercountms-i < ms
	wend	
end sub
